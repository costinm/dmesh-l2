// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2.proto

package l2api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status struct {
	// Number of L2-visible nodes - wifi, BT, BLE, of any type
	// TODO: should it be a map or indicate the type ?
	Visible int32 `protobuf:"varint,1,opt,name=visible,proto3" json:"visible,omitempty"`
	// Device local SSID. Empty if device doesn't support P2P or never started.
	SSID string `protobuf:"bytes,2,opt,name=SSID,proto3" json:"SSID,omitempty"`
	// PSK, if different from the default.
	PSK string `protobuf:"bytes,3,opt,name=PSK,proto3" json:"PSK,omitempty"`
	// AP this node is connected to, or empty if no STA connection.
	ConnectedWifi string `protobuf:"bytes,4,opt,name=ConnectedWifi,proto3" json:"ConnectedWifi,omitempty"`
	// Wifi Frequency and Level, if device is connected as STA.
	Freq                 int32    `protobuf:"varint,5,opt,name=freq,proto3" json:"freq,omitempty"`
	Level                int32    `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Scan                 []*Node  `protobuf:"bytes,7,rep,name=Scan,proto3" json:"Scan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_f692411d37028fef, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetVisible() int32 {
	if m != nil {
		return m.Visible
	}
	return 0
}

func (m *Status) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *Status) GetPSK() string {
	if m != nil {
		return m.PSK
	}
	return ""
}

func (m *Status) GetConnectedWifi() string {
	if m != nil {
		return m.ConnectedWifi
	}
	return ""
}

func (m *Status) GetFreq() int32 {
	if m != nil {
		return m.Freq
	}
	return 0
}

func (m *Status) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Status) GetScan() []*Node {
	if m != nil {
		return m.Scan
	}
	return nil
}

type Node struct {
	SSID                 string   `protobuf:"bytes,1,opt,name=SSID,proto3" json:"SSID,omitempty"`
	PSK                  string   `protobuf:"bytes,2,opt,name=PSK,proto3" json:"PSK,omitempty"`
	MAC                  string   `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Level                int32    `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	Freq                 int32    `protobuf:"varint,6,opt,name=Freq,proto3" json:"Freq,omitempty"`
	UserAgent            string   `protobuf:"bytes,7,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	Net                  string   `protobuf:"bytes,8,opt,name=Net,proto3" json:"Net,omitempty"`
	Cap                  string   `protobuf:"bytes,9,opt,name=cap,proto3" json:"cap,omitempty"`
	BSSID                string   `protobuf:"bytes,10,opt,name=BSSID,proto3" json:"BSSID,omitempty"`
	LastSeen             uint64   `protobuf:"varint,11,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_f692411d37028fef, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *Node) GetPSK() string {
	if m != nil {
		return m.PSK
	}
	return ""
}

func (m *Node) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Node) GetFreq() int32 {
	if m != nil {
		return m.Freq
	}
	return 0
}

func (m *Node) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Node) GetNet() string {
	if m != nil {
		return m.Net
	}
	return ""
}

func (m *Node) GetCap() string {
	if m != nil {
		return m.Cap
	}
	return ""
}

func (m *Node) GetBSSID() string {
	if m != nil {
		return m.BSSID
	}
	return ""
}

func (m *Node) GetLastSeen() uint64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func init() {
	proto.RegisterType((*Status)(nil), "l2api.dmesh.Status")
	proto.RegisterType((*Node)(nil), "l2api.dmesh.Node")
}

func init() { proto.RegisterFile("l2.proto", fileDescriptor_f692411d37028fef) }

var fileDescriptor_f692411d37028fef = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x99, 0x26, 0x69, 0xda, 0x5b, 0x7e, 0xe8, 0x3f, 0xb8, 0xb8, 0x88, 0x8b, 0x50, 0x14,
	0xb2, 0xca, 0xa2, 0x3e, 0x41, 0x5b, 0x11, 0xc4, 0x36, 0x48, 0x06, 0x11, 0xdc, 0x4d, 0xd3, 0x5b,
	0x0d, 0xa4, 0x49, 0x4c, 0xc6, 0xbe, 0x9e, 0xaf, 0xe4, 0x23, 0xc8, 0xdc, 0xb1, 0xad, 0xe2, 0xee,
	0x9c, 0x73, 0x67, 0xee, 0xf9, 0x98, 0x81, 0x41, 0x39, 0x4d, 0x9a, 0xb6, 0x36, 0xb5, 0x1c, 0x95,
	0x53, 0xdd, 0x14, 0xc9, 0x66, 0x47, 0xdd, 0xeb, 0xe4, 0x43, 0x40, 0x5f, 0x19, 0x6d, 0xde, 0x3b,
	0x89, 0x10, 0xee, 0x8b, 0xae, 0x58, 0x97, 0x84, 0x22, 0x12, 0x71, 0x90, 0x1d, 0xac, 0x94, 0xe0,
	0x2b, 0x75, 0x77, 0x83, 0xbd, 0x48, 0xc4, 0xc3, 0x8c, 0xb5, 0x1c, 0x83, 0xf7, 0xa0, 0xee, 0xd1,
	0xe3, 0xc8, 0x4a, 0x79, 0x09, 0xff, 0x16, 0x75, 0x55, 0x51, 0x6e, 0x68, 0xf3, 0x54, 0x6c, 0x0b,
	0xf4, 0x79, 0xf6, 0x3b, 0xb4, 0xbb, 0xb6, 0x2d, 0xbd, 0x61, 0xc0, 0x15, 0xac, 0xe5, 0x19, 0x04,
	0x25, 0xed, 0xa9, 0xc4, 0x3e, 0x87, 0xce, 0xc8, 0x2b, 0xf0, 0x55, 0xae, 0x2b, 0x0c, 0x23, 0x2f,
	0x1e, 0x4d, 0xff, 0x27, 0x3f, 0xb0, 0x93, 0xb4, 0xde, 0x50, 0xc6, 0xe3, 0xc9, 0xa7, 0x00, 0xdf,
	0xda, 0x23, 0xa5, 0xf8, 0x4b, 0xd9, 0x3b, 0x51, 0x8e, 0xc1, 0x5b, 0xcd, 0x16, 0x07, 0xee, 0xd5,
	0x6c, 0x61, 0xef, 0xa5, 0x7a, 0x47, 0xdf, 0xb8, 0xac, 0x2d, 0xd1, 0x92, 0x89, 0x1c, 0xa6, 0x33,
	0xf6, 0xe4, 0xad, 0x65, 0x77, 0x98, 0xac, 0xe5, 0x05, 0x0c, 0x1f, 0x3b, 0x6a, 0x67, 0x2f, 0x54,
	0x19, 0x0c, 0x79, 0xc5, 0x29, 0xb0, 0x6d, 0x29, 0x19, 0x1c, 0xb8, 0xb6, 0x94, 0x38, 0xc9, 0x75,
	0x83, 0x43, 0x97, 0xe4, 0xba, 0xb1, 0x5d, 0x73, 0x06, 0x07, 0xce, 0x9c, 0x91, 0xe7, 0x30, 0x58,
	0xea, 0xce, 0x28, 0xa2, 0x0a, 0x47, 0x91, 0x88, 0xfd, 0xec, 0xe8, 0xe7, 0xe1, 0x73, 0xc0, 0x8f,
	0xb1, 0xee, 0xf3, 0x8f, 0x5e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xe1, 0xc1, 0xe7, 0xdd,
	0x01, 0x00, 0x00,
}
